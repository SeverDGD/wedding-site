// –î–∞—Ç–∞ —Å–≤–∞–¥—å–±—ã
const weddingDate = new Date('2025-07-24T14:30:00');

// –¢–∞–π–º–µ—Ä –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –æ—Ç—Å—á–µ—Ç–∞
function updateCountdown() {
  const now = new Date();
  const diff = weddingDate - now;

  const days = Math.floor(diff / (1000 * 60 * 60 * 24));
  const hours = Math.floor((diff / (1000 * 60 * 60)) % 24);
  const minutes = Math.floor((diff / (1000 * 60)) % 60);
  const seconds = Math.floor((diff / 1000) % 60);

  document.getElementById('days').innerText = days;
  document.getElementById('hours').innerText = hours;
  document.getElementById('minutes').innerText = minutes;
  document.getElementById('seconds').innerText = seconds;
}

setInterval(updateCountdown, 1000);
updateCountdown();

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è
function generateCalendar(year, month) {
  const calendar = document.getElementById('calendar');
  calendar.innerHTML = '';

  const daysOfWeek = ['–ü–Ω', '–í—Ç', '–°—Ä', '–ß—Ç', '–ü—Ç', '–°–±', '–í—Å'];
  daysOfWeek.forEach(day => {
    const dayElem = document.createElement('div');
    dayElem.textContent = day;
    dayElem.style.fontWeight = 'normal';
    calendar.appendChild(dayElem);
  });

  const date = new Date(year, month, 1);
  let startDay = (date.getDay() + 6) % 7;

  for (let i = 0; i < startDay; i++) {
    const empty = document.createElement('div');
    calendar.appendChild(empty);
  }

  const daysInMonth = new Date(year, month + 1, 0).getDate();
  for (let i = 1; i <= daysInMonth; i++) {
    const dayElem = document.createElement('div');
    dayElem.textContent = i;

    const tempDate = new Date(year, month, i);
    if (tempDate.getDay() === 0 || tempDate.getDay() === 6) {
      dayElem.classList.add('weekend');
    }
    if (i === 24) {
      dayElem.classList.add('special-day');
      dayElem.innerHTML = `<span style="color:#e74c3c;">${i} ‚ù§</span>`;
    }
    calendar.appendChild(dayElem);
  }
}
generateCalendar(2025, 6); // –ò—é–ª—å 2025 (–º–µ—Å—è—Ü—ã —Å—á–∏—Ç–∞—é—Ç—Å—è —Å 0)

// –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è –ø—Ä–∏ —Å–∫—Ä–æ–ª–ª–µ
const reveals = document.querySelectorAll('.reveal');
window.addEventListener('scroll', () => {
  reveals.forEach(el => {
    const windowHeight = window.innerHeight;
    const elementTop = el.getBoundingClientRect().top;
    if (elementTop < windowHeight - 50) {
      el.classList.add('show');
    }
  });
});

// –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ä–º—ã –≤ Telegram
const TOKEN = '–í–ê–®_–¢–û–ö–ï–ù_–ë–û–¢–ê'; // —Å—é–¥–∞ –≤—Å—Ç–∞–≤—å —Ç–æ–∫–µ–Ω
const CHAT_ID = '–í–ê–®_CHAT_ID';   // —Å—é–¥–∞ –≤—Å—Ç–∞–≤—å chat_id
const URI_API = `https://api.telegram.org/bot${TOKEN}/sendMessage`;

document.getElementById('guestForm').addEventListener('submit', function(e) {
  e.preventDefault();

  const formData = new FormData(this);
  const fullname = formData.get('fullname');
  const companion = formData.get('companion');
  const attendance = formData.get('attendance');
  const alcohol = formData.get('alcohol');
  const music = formData.get('music');

  const message = `
<b>üì© –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ —Å–≤–∞–¥—å–±—É!</b>
<b>–§–ò–û:</b> ${fullname}
<b>–° –∫–µ–º –ø–æ—Å–µ—Ç–∏—Ç–µ:</b> ${companion}
<b>–ü—Ä–∏—Å—É—Ç—Å—Ç–≤–∏–µ:</b> ${attendance}
<b>–ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –∞–ª–∫–æ–≥–æ–ª—è:</b> ${alcohol}
<b>–õ—é–±–∏–º—ã–π —Ç—Ä–µ–∫:</b> ${music}
  `;

  fetch(URI_API, {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json'
    },
    body: JSON.stringify({
      chat_id: CHAT_ID,
      text: message,
      parse_mode: 'HTML'
    })
  })
  .then(response => {
    if (response.ok) {
      alert('–°–ø–∞—Å–∏–±–æ! –í–∞—à –æ—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω üéâ');
      this.reset();
    } else {
      alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  })
  .catch(error => {
    alert('–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    console.error('–û—à–∏–±–∫–∞:', error);
  });
});
